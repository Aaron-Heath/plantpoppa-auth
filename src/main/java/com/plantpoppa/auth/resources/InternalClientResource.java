package com.plantpoppa.auth.resources;

import com.plantpoppa.auth.models.InternalClient;
import com.plantpoppa.auth.services.AuthenticationService;
import com.plantpoppa.auth.services.InternalClientService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/service")
public class InternalClientResource {

    private final AuthenticationService authenticator;
    private final InternalClientService clientService;

    @Autowired
    public InternalClientResource(AuthenticationService authenticator,
                                  InternalClientService clientService) {
        this.authenticator = authenticator;
        this.clientService = clientService;
    }

    /**
     * @param internalClient must have title. Uuid, title, secret, and salt are generated by the client service.
     * @return HashMap with the uuid and secret which will be used in future authentications.
     *
     * DEVELOPER MUST RECORD SECRET. IT WILL BE HASHED AND UNRETRIEVABLE IN PLAIN TEXT AFTER THIS RESPONSE
     *
     * */
    @PostMapping(value = "/register",
    consumes = MediaType.APPLICATION_JSON_VALUE,
    produces =  MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<?> createService(@RequestBody InternalClient internalClient) {
        HashMap<String, String> response = new HashMap<>();
        try {
            response = clientService.registerApplicationService(internalClient);
            return new ResponseEntity<>(response, HttpStatus.OK);

        } catch (Exception e) {
            System.out.println(e.getMessage());
            response.put("message", "Unable to register service");
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
